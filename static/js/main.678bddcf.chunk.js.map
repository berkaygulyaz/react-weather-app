{"version":3,"sources":["components/boxes/index.js","components/city-info/index.js","components/container/index.js","App.js","serviceWorker.js","index.js"],"names":["Boxes","props","daily","weatherData","className","map","dailyItem","myDate","Date","dt","toLocaleDateString","src","weather","icon","alt","temp","max","min","CityInfo","location","Container","this","children","Component","App","state","coords","latitude","longtitude","data","navigator","geolocation","getCurrentPosition","position","newCoords","longitude","setState","Axios","get","then","res","weatherInfo","timezone","currentDateTime","toLocaleString","console","log","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6WAGe,SAASA,EAAMC,GAAO,IAG1BC,EADeD,EAAfE,YACAD,MACP,OACI,yBAAKE,UAAU,iBAEPF,GAASA,EAAMG,KAAI,SAACC,GAChB,IAAMC,EAAS,IAAIC,KAAoB,IAAfF,EAAUG,IAClC,OACA,yBAAKL,UAAU,OACX,wBAAIA,UAAU,YAAYG,EAAOG,sBACjC,yBAAKC,IAAK,oCAAqCL,EAAUM,QAAQ,GAAGC,KAAO,UAAWC,IAAI,KAC1F,0BAAMV,UAAU,kBAAkBE,EAAUS,KAAKC,IAAjD,UAA0DV,EAAUS,KAAKE,IAAzE,a,MCbT,SAASC,EAASjB,GAAO,IAG7BkB,EADelB,EAAfE,YACAgB,SAEP,OACI,yBAAKf,UAAU,qBACX,wBAAIA,UAAU,aAAae,I,UCGxBC,E,uKARP,OACI,yBAAKhB,UAAU,mBAAf,IACMiB,KAAKpB,MAAMqB,c,GAJLC,aCwDTC,E,4MAlDXC,MAAO,CACLC,OAAQ,CACJC,SAAU,GACVC,WAAY,IAEhBC,KAAM,I,kEAGa,IAAD,OAGbC,UAAUC,YACTD,UAAUC,YAAYC,oBAAmB,SAACC,GACtC,IAAIC,EAAY,CACZP,SAAUM,EAASP,OAAOC,SAC1BC,WAAYK,EAASP,OAAOS,WAGhC,EAAKC,SAAS,CAACV,OAAQQ,IACvBG,IAAMC,IAAN,8DAAiE,EAAKb,MAAMC,OAAOC,SAAnF,gBAAmG,EAAKF,MAAMC,OAAOE,WAArH,wEAAsMW,MAAK,SAAAC,GACvM,IAAIC,EAAc,CACdtB,SAAUqB,EAAIX,KAAKa,SACnBxC,MAAOsC,EAAIX,KAAK3B,MAChByC,iBAAiB,IAAInC,MAAOoC,kBAEhC,EAAKR,SAAS,CACVP,KAAMY,IAEVI,QAAQC,IAAI,EAAKrB,MAAMI,MACvBgB,QAAQC,IAAIN,SAKpBK,QAAQC,IAAI,wB,+BAKpB,OACE,yBAAK1C,UAAU,uBACb,kBAAC,EAAD,KACE,kBAACc,EAAD,CAAUf,YAAakB,KAAKI,MAAMI,OAClC,kBAAC7B,EAAD,CAAOG,YAAakB,KAAKI,MAAMI,a,GA7CvBN,aCKEwB,QACW,cAA7BC,OAAO7B,SAAS8B,UAEe,UAA7BD,OAAO7B,SAAS8B,UAEhBD,OAAO7B,SAAS8B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBzB,WACrBA,UAAU0B,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhB,QAAQgB,MAAMA,EAAMC,c","file":"static/js/main.678bddcf.chunk.js","sourcesContent":["import React, {  } from \"react\";\r\nimport './style.css';\r\n\r\nexport default function Boxes(props){\r\n\r\n    const {weatherData} = props;\r\n    const {daily} = weatherData;\r\n    return(\r\n        <div className=\"boxes-wrapper\">\r\n            {\r\n                daily && daily.map((dailyItem) => {\r\n                    const myDate = new Date(dailyItem.dt * 1000);\r\n                    return (\r\n                    <div className=\"box\">\r\n                        <h3 className=\"day-name\">{myDate.toLocaleDateString()}</h3>\r\n                        <img src={`http://openweathermap.org/img/wn/`+ dailyItem.weather[0].icon + \"@2x.png\"} alt=\"\"></img>\r\n                        <span className=\"weather-rating\">{dailyItem.temp.max}° / {dailyItem.temp.min}°</span>\r\n                    </div>\r\n\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { } from \"react\";\r\nimport './style.css';\r\n\r\nexport default function CityInfo(props){\r\n\r\n    const {weatherData} = props;\r\n    const {location} = weatherData;\r\n\r\n    return(\r\n        <div className=\"city-info-wrapper\">\r\n            <h1 className=\"city-name\">{location}</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from \"react\";\r\nimport './style.css';\r\n\r\nclass Container extends Component{\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                ${this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Container;","import React, { Component } from 'react';\nimport './App.css';\nimport Axios from \"axios\"\nimport Boxes from './components/boxes';\nimport CityInfo from './components/city-info';\nimport Container from './components/container'\n\nclass App extends Component {\n\n    state= {\n      coords: {\n          latitude: 45,\n          longtitude: 60\n      },\n      data: {}\n    }\n\n    componentDidMount() {\n\n        // Get Location\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                let newCoords = {\n                    latitude: position.coords.latitude,\n                    longtitude: position.coords.longitude\n                }\n\n                this.setState({coords: newCoords})\n                Axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.state.coords.latitude}&lon=${this.state.coords.longtitude}&exclude=hourly&appid=46470136edd4f53667ef9efa0cd415da&units=metric`).then(res => {\n                    let weatherInfo = {\n                        location: res.data.timezone,\n                        daily: res.data.daily,\n                        currentDateTime: new Date().toLocaleString(),\n                    }\n                    this.setState({\n                        data: weatherInfo\n                    })\n                    console.log(this.state.data)\n                    console.log(res)\n                })\n\n            })\n        } else {\n            console.log(\"Location Not Found\")\n        }\n    }\n\n  render() {\n    return (\n      <div className=\"weather-app-wrapper\">\n        <Container>\n          <CityInfo weatherData={this.state.data}></CityInfo>\n          <Boxes weatherData={this.state.data}></Boxes>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}